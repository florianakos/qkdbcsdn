#!/bin/bash

printf "\nStarting Program - SDNBCQKD\n"

# Checking if the 'restsdn' utility is properly installed.
which restsdn 1> /dev/null
if [ $? -ne 0 ]; then
	echo "The 'restsdn' utility is missing, please fix it with make install!"
	exit 1
fi

# Parameters for restsdn_net tool
HOST=localhost
PORT=1234

# Temporary files
FILE=/tmp/sdnqkd1-$$
ERROR=/tmp/sdnqkd-err-$$

# Function to clean up temp files upon exit (Ctrl+C)
cleanup_exit() {
	printf "Cleaning up temporary filed before shutdown..."
    rm -f $FILE $ERROR
    printf "\nProgram ready for shutdown.\n\n"
    exit 0
}

# Function to catch interrupt signal Ctrl+C
function finish() {
	printf "\n\nInterrupt signal received! Initiating showdown sequence!"
	cleanup_exit
}
trap finish SIGINT

#show banner in terminal for TUI, GUI and NET editions 
# cat banner.txt  /LOCAL VERSION/
cat /usr/local/etc/banner.txt

# Infinite loop to ask for user input on repeat
while true; do
	#TEST to see if the Terminal version or the GUI version was called
	if [ `basename $0` = "restsdn_tui" ]; then
		read -p "Switch to: " ACTION

	elif [ `basename $0` = "restsdn_gui" ]; then
		which gdialog 1> /dev/null && DIALOG=gdialog || DIALOG=dialog 1> /dev/null
		$DIALOG --inputbox "Switch to: " 30 60 2> $FILE 
		ACTION=`cat $FILE`
		
	elif [ `basename $0` = "restsdn_net" ]; then
		read -p "Switch to: " ACTION
		if [ $ACTION -eq 0 ] ;then
			cleanup_exit
		fi
		# execution for network enabled part was moved to this scope, 
		# because return value of "nc localhost 1234" was always 0, 
		# regardless of success of failure, so the logic for TUI 
		# and GUI could not be used
		echo $ACTION | `nc $HOST $PORT`
	fi	

	if [ `basename $0` = "restsdn_tui" -o `basename $0` = "restsdn_gui" ]; then

		echo $ACTION | restsdn
		result=$?
		case $result in
		0) # the restsdn script exited with 0, that means user wants to quit > do cleanup!
			cleanup_exit ;;
		1) # the restsdn script exited with 1, that means input was not a valid digit, let the user try again!
			printf "Please enter a valid number as seen in the instructions!\n" ;;
		2) # the restsdn script exited with 2, that means input was digit other than 1 or 2
			printf "Invalid channel number. Please try again!\n" ;;
		10) # the restsdn script exited with 10, that means the HTTP request was sent successfully
			printf "Channel switched to: %s\n" $ACTION ;;
		esac
	fi
done
